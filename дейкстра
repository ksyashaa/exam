#include<bits/stdc++.h>
using namespace std;
vector <pair<int,int> > graph[1001];
bool used[1001];
vector <int> dist(1001,1e9);
vector <int> parent(1001);
int n;
void dkstr(int v)
{
	int minn=dist[v];
	while (minn!=1e9)
	{
		used[v]=1;
		for (int i=0; i<graph[v].size(); i++)
		{
			int a=graph[v][i].first;
			int b=graph[v][i].second;
			if (dist[a]>dist[v]+b) 
			{
			  dist[a]=dist[v]+b;
			  parent[a]=v;
		    }
		}
		minn=1e9;
		for (int i=1; i<=n; i++)
		  if (dist[i]<minn && !used[i])
		  {
		  	minn=dist[i];
		  	v=i;
		  }
	}
}
int main()
{
	int s,f;
	cin>>n>>s>>f;
	for (int i=1; i<=n; i++)
	{
	  for (int j=1; j<=n; j++)
	  {
	  	int x;
	  	cin>>x;
	  	if (i!=j && x!=-1) graph[i].push_back({j,x});
	  }
    }
    dist[s]=0;
    parent[s]=-1;
    dkstr(s);
    if (dist[f]!=1e9)
    {
    	vector <int> rez;
    	rez.push_back(f);
    	while (parent[f]!=-1)
    	{
    		rez.push_back(parent[f]);
    		f=parent[f];
		}
	    reverse(rez.begin(), rez.end());
	    for (int i=0; i<rez.size(); i++)
	      cout<<rez[i]<<" ";
	}
	else cout<<"-1"<<endl;
}
