#include <iostream>
using namespace std;

struct list
{
    int data;
    struct list * next;
};

typedef struct stack {struct list *top;} Stack; 


void makenull (Stack *s)
{
    struct list *p;
    while (s -> top)
    {
        p = s -> top;
        s -> top = p -> next;
        free(p);
    }
}


Stack *create()
{
    Stack * s;
    s = (Stack *) malloc (sizeof (Stack));
    s -> top = NULL;
    return s;
}


int top(Stack *s)
{
    if (s -> top)
    {
        return (s -> top -> data);
    }
    else
    {
        return 0;
    }
}


int pop(Stack *s)
{
    int a;
    struct list *p;
    p = s -> top;
    a = p -> data;
    s -> top = p -> next;
    free(p);
    return a;
}


void push(int a, Stack *s)
{
    struct list *p;
    p = (struct list *) malloc (sizeof (struct list));
    p -> data = a;
    p -> next = s -> top;
    s -> top = p;
}


int empty(Stack *S)
{
    return (S->top == NULL);
}

int prioritet(char c)
{
    if (c=='(') return 1;
    else if (c==')') return 2;
    else if (c=='=') return 3;
    else if (c=='+' || c=='-') return 4;
    else if (c=='*' || c=='/') return 5;
    else return -1;
}
int main()
{
    
    string s,s1;
    cin>>s;
    int x=s[0];
    Stack *a=create();
    makenull(a);
    for (int i=0; i<s.size(); i++)
    {
    	if (prioritet(i)==-1) s1.push_back(i);
    	else if (prioritet(i)==1) push(i,a);
    	else if (prioritet(i)==2) 
    	{
    		while (pop(a)!=')')
    		{
    			pop(a);
    			s.push_back(i);
    		}
    	}
    else while (!empty(a) && prioritet(i)>=prioritet(x))
    {
    	pop(a);
    	s1.push_back(i);
    	push(x,a);
    }
    if (s.empty()==false) x=s[i];
    else while (!empty(a)) s1.push_back(i);
    }
    cout<<s1;
    return 0;
}

